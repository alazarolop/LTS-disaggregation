############################################################
#Experimental
#Compute a univariate cramers V to determine strength of association between the probabilities
of terrain units in the LTS and random samples of a stack of geomorphons
#code was modified from the DSMART code developed by Brendan Malone to provide random 
samples for each LTS polygon and determine strength of association of the landform elements
and the LTS terrain units. 
#Alternatively, the soil type probabilities can be used.

#   gm = stack of geomorphon rasters to evaluate
#   polygon = LTS polygon cliped to extent of area
#   comp = composition of landform elements and probabilities in LTS (data frame same as DSMART)
#   iter: number of iterations to average values over
#   sampling: either by polygon ("PP") or by area ("AP") in ha
#   minsamp = minimum number of samples per polygon
  
#realisations should be high enough for stable results
############################################################

GM_select<-function(gm = NULL, lts = NULL, 
                comp = NULL, n=NULL, iter = NULL,
                sampling = "PP",minsamp = 0){
  require(lsr)
  require(plyr)
  
  from = c(1, 2, 3,4, 5, 6, 7,8, 9, 10)
  to = c(5, 1, 1, 3,3, 3, 4, 4,5, 5)
  mat = cbind(from, to) #matrix of levels to change
  gm= reclassify(gm, rcl = mat)#reclassify pixel values

  #create output repositories
  sel<- vector("list", iter) #empty list 

  # For area-proportional sampling, calculate polygon areas in hecters squared
  if(sampling == "AP"){
    areas <- raster::area(lts)/1e4
    sample_rate <- n
    number <- 0
  }
  
  for (j in 1:iter){
    # Empty data frame to store samples
    coordF<- matrix(NA, nrow=1000, ncol=3)
    coordF<- data.frame(coordF)
    names(coordF)<- c("x", "y", "class")
    cf<- 1
    for(poly.id in lts@data[,1])
    {
      
      # For area-proportional sampling, calculate number of samples to draw
      if(sampling == "AP"){
        number <- number + 1
        n <- ceiling(areas[number] / sample_rate)
        n <- max(minsamp, n)
      }
      
      # Subset a single polygon
      poly = subset(lts, lts@data[,1]==poly.id)
      coordF[cf:(cf+(n-1)),1:2] = as.data.frame(spsample(poly, n , type="random", iter=10))
      
      # Allocate soil classes from within map unit
      poly.comp=subset(comp, comp$poly==poly.id)
      # Draw from Dirichlet distribution
      s=rdirichlet(1, poly.comp$probability)
      
      # Weighted-random sample
      coordF$class[cf:(cf+(n-1))]=sample(poly.comp$soil_class, size=n, replace=TRUE, prob=s[1,])
      cf<- cf+n}
    
    #spatial object to extract geomorphon values
    locs<- as.data.frame(coordF[complete.cases(coordF),])
    coordinates(locs)<- ~ x + y  
    
    # Extract geomorphon values for each sample
    values=raster::extract(gm,locs)
    
    #create data frame of samples
    samples = cbind(as.data.frame(values),as.data.frame(locs)[,3])  
    names(samples)[ncol(samples)]<- "soil_class"
    samples$soil_class<- as.factor(samples$soil_class)
    
    #run univariate Cramer's V 
    for(i in names(samples[, -which(names(samples) %in% "soil_class")])){
      sel[[j]][[i]] = cramersV(table(samples[,i], y=samples$soil_class))
    }
  }
  
  #get results into data frame
  res = as.data.frame(sel)
  colnames(sel) = "iter"
  
  #averave CV values over all realisations
  res = apply(sel, 1, mean)
  res = as.data.frame(sel)
  res$gm = row.names(sel)
  res = plyr::arrange(sel, sel)
  return(sel)
}
