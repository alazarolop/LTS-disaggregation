############################################################
#Compute cramers V value to select a geomorphon based on the probabilities in the LTS
#code was modified from the DSMART code developed by Brendan Malone
  #gm = stack of geomorphon rasters to evaluate
  #polygon = LTS polygon cliped to extent of area
  #comp = composition of landform elements and probabilities in LTS (data frame same as DSMART)
  #reals: number of iterations to average values over
  #sampling: either by polygon ("PP") or by area ("AP")
  #minrate = minimum number of samples per polygon
  
#this is experimental
############################################################

GM_select<-function(gm = NULL, polygon = NULL, 
                 comp= NULL, n=NULL, iter= NULL, 
                 sampling = "PP",minrate = 0){
  
  # For area-proportional sampling, calculate polygon areas in kilometers squared
  if(sampling == "AP"){
    areas <- raster::area(polygons)/1e6
    sample.rate <- n
    number <- 0
  }
  
  for (j in 1:reals){
    # Empty data frame to store samples
    coordF<- matrix(NA, nrow=1000, ncol=3)
    coordF<- data.frame(coordF)
    names(coordF)<- c("x", "y", "class")
    cf<- 1
    for(poly.id in polygons@data[,1])
    {
      # For area-proportional sampling, calculate number of samples to draw
      if(sampling == "AP"){
        number <- number + 1
        n <- ceiling(areas[number] / sample_rate)
        n <- max(minrate, n)
      }
      
      # Subset a single polygon
      poly = subset(polygons, polygons@data[,1]==poly.id)
      coordF[cf:(cf+(n-1)),1:2] = as.data.frame(spsample(poly, n , type="random", iter=10))
      
      # Allocate soil classes from within map unit
      poly.comp=subset(comp, comp$poly==poly.id)
      
      # Draw from Dirichlet distribution
      s=rdirichlet(1, poly.comp$probability)
      
      # Weighted-random sample
      coordF$class[cf:(cf+(n-1))]=sample(poly.comp$soil_class, size=n, replace=TRUE, prob=s[1,])
      cf<- cf+n}
      
    #spatial object
    locs<- as.data.frame(coordF[complete.cases(coordF),])
    coordinates(locs)<- ~ x + y  
    # Extract covariate values for the sampling locations
    values=extract(gm,locs)
    
    #sample frame
    samples = cbind(as.data.frame(values),as.data.frame(locs)[,3])  
    names(samples)[ncol(samples)]<- "soil_class"
    samples$soil_class<- as.factor(samples$soil_class)
    
    #Fit model####
    for(i in names(samples)){
      res[[i]] = cramersV(x=samples[,-samples$soil_class], y = samples$soil_class)
    }
    model_lists[[j]]<- res[[i]]
  }
}

#END
